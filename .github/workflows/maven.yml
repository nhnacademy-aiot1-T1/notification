# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main", "develop", "release/**" ]
  pull_request:
    branches: [ "main", "develop", "release/**" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Set HookUrl & Email property
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml
      env:
        spring.mail.username: ${{ secrets.MAIL_USERNAME }}
        spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
        message.dooray.hook-url: ${{ secrets.DOORAY_HOOK_URL }}

    - name: Set eureka url
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application-prod.yml
      env:
        eureka.client.service-url.defaultZone: ${{ secrets.EUREKA_URL }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # Test   
    - name : Run SonarQube
      run : mvn sonar:sonar -Dsonar.projectKey=github-action -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.login=${{secrets.SONAR_TOKEN}}  

    #Deploy
    - name: Docker build & push
      run: |
        docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
        docker build -t "${{ secrets.DOCKER_USERNAME }}"/notification .
        docker push "${{ secrets.DOCKER_USERNAME }}"/notification

    - name: SSH to Server and Docker pull & up
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_IP }}
        username: ${{ secrets.SSH_ID }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker pull "${{ secrets.DOCKER_USERNAME }}"/notification
          docker stop notification || true
          docker rm notification || true 
          docker run -d --name notification "${{ secrets.DOCKER_USERNAME }}"/notification